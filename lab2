#include <iostream>
#include <cmath>
#include <vector>
#include <iomanip>

using namespace std;


double f1(double x1, double x2) {
    return pow(x1, 3) + pow(x2, 3) - 6 * x1 + 3;
}

double f2(double x1, double x2) {
    return pow(x1, 3) - pow(x2, 3) - 6 * x2 + 2;
}

double df1_dx1(double x1, double x2) {
    return 3 * pow(x1, 2) - 6;
}

double df2_dx1(double x1, double x2) {
    return 3 * pow(x1, 2);
}

double df1_dx2(double x1, double x2) {
    return 3 * pow(x2, 2);
}

double df2_dx2(double x1, double x2) {
    return -3 * pow(x2, 2) - 6;
}

vector<double> solveLinearSystem(const vector<vector<double>>& A, const vector<double>& b) {
    int n = A.size();

    vector<vector<double>> augmentedMatrix(n, vector<double>(n + 1, 0.0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            augmentedMatrix[i][j] = A[i][j];
        }
        augmentedMatrix[i][n] = b[i];
    }

    for (int i = 0; i < n; ++i) {

        int maxRow = i;
        for (int k = i + 1; k < n; ++k) {
            if (abs(augmentedMatrix[k][i]) > abs(augmentedMatrix[maxRow][i])) {
                maxRow = k;
            }
        }

        swap(augmentedMatrix[i], augmentedMatrix[maxRow]);

        for (int k = i + 1; k < n; ++k) {
            double factor = augmentedMatrix[k][i] / augmentedMatrix[i][i];
            for (int j = i; j <= n; ++j) {
                augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
            }
        }
    }

    vector<double> x(n, 0.0);
    for (int i = n - 1; i >= 0; --i) {
        x[i] = augmentedMatrix[i][n] / augmentedMatrix[i][i];
        for (int k = i - 1; k >= 0; --k) {
            augmentedMatrix[k][n] -= augmentedMatrix[k][i] * x[i];
        }
    }

    return x;
}

vector<vector<double>> computeJacobianAnalytical(double x1, double x2) {
    vector<vector<double>> jacobian(2, vector<double>(2, 0.0));

    jacobian[0][0] = df1_dx1(x1, x2);
    jacobian[0][1] = df1_dx2(x1, x2);
    jacobian[1][0] = df2_dx1(x1, x2);
    jacobian[1][1] = df2_dx2(x1, x2);

    return jacobian;
}

vector<double> newtonMethod(double x1, double x2, double epsilon1, double epsilon2, int maxIterations, double M) {
    for (int iteration = 0; iteration < maxIterations; ++iteration) {

        vector<vector<double>> jacobian = computeJacobianAnalytical(x1, x2);

        vector<double> delta = solveLinearSystem(jacobian, { -f1(x1, x2), -f2(x1, x2) });

        x1 += M * delta[0];
        x2 += M * delta[1];

        cout << "Iteration " << iteration + 1 << ":" << endl;
        cout << "Solution: (" << x1 << ", " << x2 << ")" << endl;

        cout << "Jacobian Matrix:" << endl;
        for (const auto& row : jacobian) {
            for (const auto& element : row) {
                cout << element << " ";
            }
            cout << endl;
        }

        if (fabs(delta[0]) < epsilon1 && fabs(delta[1]) < epsilon2) {
            cout << "Converged after " << iteration + 1 << " iterations." << endl;
            return { x1, x2 };
        }

        cout << "Delta1 = " << delta[0] << ", Delta2 = " << delta[1] << endl;
        cout << "---------------------------------" << endl;
    }

    cout<< maxIterations << " iterations." << endl;
    return { 0.0, 0.0 };
}

int main() {
    //нач данные
    vector<pair<double, double>> initialGuesses = { {2.0, 1.5}, {1.0, 1.0}, {-3.0, -1.5} };


    double epsilon1 = 1e-9;
    double epsilon2 = 1e-9;
    int maxIterations = 100;

    vector<double> M_values = { 0.01, 0.05, 0.1 };

    for (const auto& initialGuess : initialGuesses) {
        cout << "Initial guess: (" << initialGuess.first << ", " << initialGuess.second << ")" << endl;

        for (const auto& M : M_values) {
            cout << "M = " << M << endl;

            vector<double> result = newtonMethod(initialGuess.first, initialGuess.second, epsilon1, epsilon2, maxIterations, M);

            cout << "=================================" << endl;
        }

        cout << "=================================" << endl;
    }

    return 0;
}
